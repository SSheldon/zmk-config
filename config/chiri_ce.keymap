#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define LAYER_Base 0
#define LAYER_Cmd 1
#define LAYER_Nav 2
#define LAYER_Sym 3
#define LAYER_Num 4
#define LAYER_Func 5
#define LAYER_Sys 6
#define LAYER_AppSwitch 7

#define SMT(x) &smt x x

/ {
    chosen {
        zmk,matrix-transform = &five_column_transform;
    };

    behaviors {
        tog_on: behavior_tog_on {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            toggle-mode = "on";
        };
        tog_off: behavior_tog_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        // Enables the Command layer while held
        cmdt: cmdt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            bindings = <&macro_command_hold>, <&kp>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
        };

        // Sticky mod tap; only sticky on tap so that mods can be held for mouse without persisting after clicks
        smt: smt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
            flavor = "tap-preferred";
            hold-while-undecided;
            hold-while-undecided-linger;
        };
    };

    macros {
        // Enables the Command layer while a modifier is held
        macro_command_hold: macro_command_hold {
            label = "&MACRO_COMMAND_HOLD";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <0>;
            bindings = <&macro_press>
                , <&macro_param_1to1>
                , <&kp MACRO_PLACEHOLDER>
                , <&mo LAYER_Cmd>
                , <&macro_pause_for_release>
                , <&macro_release>
                , <&macro_param_1to1>
                , <&kp MACRO_PLACEHOLDER>
                , <&mo LAYER_Cmd>
                , <&macro_tap>
                , <&tog_off LAYER_AppSwitch>;
        };

        // Begins app switching, enabling the AppSwitch layer
        macro_app_switch_start: macro_app_switch_start {
            label = "&MACRO_APP_SWITCH_START";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&tog_on LAYER_AppSwitch>
                , <&kp TAB>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Begins app switching
        combo_app_switch {
            timeout-ms = <75>;
            key-positions = <11 12>;
            bindings = <&macro_app_switch_start>;
            layers = <LAYER_Cmd>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        num_tri_layer {
            if-layers = <LAYER_Nav LAYER_Sym>;
            then-layer = <LAYER_Num>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
          &kp X  &kp C  &kp L  &kp D  &kp K                      &kp Z     &kp Y    &kp O    &kp U      &kp Q
          &kp R  &kp S  &kp T  &kp H  &kp F                      &kp P     &kp N    &kp E    &kp I      &kp A
          &kp W  &kp V  &kp G  &kp M  &kp J  &kp LGUI  &kp RALT  &kp BSPC  &kp B  &kp SQT  &kp DOT  &kp COMMA
  &mo LAYER_Sys  &cmdt LCTRL SPACE  &lt LAYER_Nav ESC  &lt LAYER_Sym TAB  &mt RSHFT RET  &mo LAYER_Func
            >;
        };

        layer_Cmd {
            bindings = <
  &kp Q   &kp W  &trans  &trans  &trans                   &trans  &trans    &trans    &trans  &trans
  &kp A  &trans  &trans   &kp R  &trans                   &trans  &trans    &trans    &trans  &trans
  &kp Z   &kp X   &kp C   &kp V   &kp G   &none  &trans   &trans  &trans    &trans    &trans  &trans
                          &none   &none   &none  &kp TAB  &trans   &none
            >;
        };

        layer_Nav {
            bindings = <
      &none      &none  &key_repeat       &none   &none                    &kp ESC   &kp TAB    &kp RET    &kp DEL      &none
  SMT(LGUI)  SMT(LALT)   SMT(LCTRL)  SMT(LSHFT)   &none                  &kp SPACE  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT
      &none      &none        &none       &none   &none   &none   &none     &trans  &kp HOME  &kp PG_DN  &kp PG_UP    &kp END
                                          &none   &none   &none  &trans    &kp RET     &none
            >;
        };

        layer_Sym {
            bindings = <
  &kp TILDE     &kp AT  &kp HASH   &kp DLLR  &kp PRCNT                  &kp CARET   &kp AMPS  &kp LBKT  &kp RBKT   &kp SEMI
   &kp EXCL  &kp EQUAL  &kp STAR  &kp MINUS   &kp PLUS                   &kp PIPE  &kp UNDER  &kp LBRC  &kp RBRC  &kp COLON
  &kp GRAVE   &kp LPAR  &kp RPAR   &kp FSLH   &kp BSLH   &none   &none     &trans    &kp DQT    &kp LT    &kp GT  &kp QMARK
                                      &none  &kp SPACE   &trans  &none     &none     &none
            >;
        };

        layer_Num {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                &kp CARET  &kp N7  &kp N8  &kp N9  &kp COLON
  &trans  &trans  &trans  &trans  &trans                   &kp N0  &kp N4  &kp N5  &kp N6    &kp DOT
  &trans  &trans  &trans  &trans  &trans  &none  &none     &trans  &kp N1  &kp N2  &kp N3  &kp COMMA
                           &none   &none  &none  &none      &none   &none
            >;
        };

        layer_Func {
            bindings = <
  &kp C_BRI_UP  &kp C_PREV    &kp C_NEXT      &kp C_PP   &none                   &kp F12  &kp F7  &kp F8  &kp F9  &kp F15
      &kp LGUI    &kp LALT     &kp LCTRL     &kp LSHFT   &none                   &kp F11  &kp F4  &kp F5  &kp F6  &kp F14
  &kp C_BRI_DN  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none   &none   &none   &kp F10  &kp F1  &kp F2  &kp F3  &kp F13
                                                 &none   &none   &none   &none   &none    &none
            >;
        };

        layer_Sys {
            bindings = <
  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                   &none  &none  &none       &none        &none
  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                   &none  &none  &none       &none        &none
      &bootloader       &sys_reset            &none            &none            &none   &none   &none   &none  &none  &none  &sys_reset  &bootloader
                                                               &none            &none   &none   &none   &none  &none
            >;
        };

        layer_AppSwitch {
            bindings = <
     &none        &none    &none    &none   &none                   &none     &none     &none   &none      &none
  &kp HOME  &kp LS(TAB)  &kp TAB  &kp END   &none                   &none     &none     &none   &none      &none
     &none        &none    &none    &none   &none   &none   &none   &none     &none     &none   &none      &none
                                    &none   &none   &none   &none   &none     &none
            >;
        };
    };
};

&lt {
    flavor = "balanced";
};

&mt {
    flavor = "balanced";
};

&sk {
    release-after-ms = <5000>;
    quick-release;
};
